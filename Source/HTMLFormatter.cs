using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace QuickDoc
{
    //@qdclass(Formats to a html document.)
    public class HTMLFormatter : Formatter
    {
        private static char[] illegals = new char[2] { '<', '>', '\"', '&' };
        private static Dictionary<char, string> escapes = new Dictionary<char, string>() { { illegals[0], "&lt;" }, { illegals[1], "&gt;" }, { illegals[2], "&quot;" }, { illegals[3], "&amp;" } };

        private List<string> buffer = new List<string>();

        public string EscapeIllegals(string value)
        {
            string newString = "";

            foreach(char c in value)
            {
                if (illegals.Contains(c))
                    newString += escapes[c];
                else
                    newString += c;
            }

            return newString;
        }

        private DataType EscapeData(DataType type)
        {
            if (typeof(Field).IsAssignableFrom(type.GetType()))
                return (DataType)EscapeField((Field)type);
            else if (typeof(Method).IsAssignableFrom(type.GetType()))
                return (DataType)EscapeMethod((Method)type);
            else if (typeof(Class).IsAssignableFrom(type.GetType()))
                return (DataType)EscapeClass((Class)type);

            return null;
        }

        private Field EscapeField(Field field)
        {
            field.name = EscapeIllegals(field.name);
            field.description = EscapeIllegals(field.description);
            field.type = EscapeIllegals(field.type);

            return field;
        }

        private Method EscapeMethod(Method method)
        {
            method.name = EscapeIllegals(method.name);
            method.description = EscapeIllegals(method.description);
            method.returnType = EscapeIllegals(method.returnType);

            for (int i = 0; i < method.parameters.Count; i++)
            {
                method.parameters[i] = EscapeField(method.parameters[i]);
            }

            return method;
        }

        private Class EscapeClass(Class c)
        {
            c.name = EscapeIllegals(c.name);
            c.description = EscapeIllegals(c.description);

            for (int i = 0; i < c.memberFields.Count; i++)
            {
                c.memberFields[i] = EscapeField(c.memberFields[i]);
            }
            for (int i = 0; i < c.memberMethods.Count; i++)
            {
                c.memberMethods[i] = EscapeMethod(c.memberMethods[i]);
            }

            return c;
        }

        public override void FormatSource(AnalyzedSource source, ExecutionRequest executionRequest)
        {

            // escaping characters

            List<DataType> types = new List<DataType>();

            types.AddRange(source.fields);
            types.AddRange(source.methods);
            types.AddRange(source.classes);

            for (int i = 0; i < types.Count; i++)
            {
                EscapeData(types[i]);
            }

            AddHead(executionRequest);

            buffer.Add("<html>");

            buffer.Add(GenerateIndex(source.fields, source.methods, source.classes));

            buffer.Add("<body>");

            if(source.fields.Count > 0)
            {
                buffer.Add("<section id=\"fields\">");
                buffer.Add("<h2>Fields</h2>");
                buffer.Add("<br>");
                buffer.Add("<ul>");
                foreach(Field f in source.fields)
                {
                    buffer.Add("<li>");
                    buffer.Add(FormatField(f));
                    buffer.Add("</li>");
                }
                buffer.Add("</ul>");
                buffer.Add("</section>");
            }

            if(source.methods.Count > 0)
            {
                buffer.Add("<section id=\"methods\">");
                buffer.Add("<h2>Methods</h2>");
                buffer.Add("<br>");
                buffer.Add("<ul>");
                foreach(Method m in source.methods)
                {
                    buffer.Add("<li>");
                    buffer.Add(FormatMethod(m));
                    buffer.Add("</li>");
                }
                buffer.Add("</ul>");
                buffer.Add("</section>");;
            }

            if(source.classes.Count > 0)
            {
                buffer.Add("<section id=\"classes\">");
                buffer.Add("<h2>Classes</h2>");
                buffer.Add("<br>");
                buffer.Add("<ul>");
                foreach(Class c in source.classes)
                {
                    buffer.Add("<li>");
                    buffer.Add(FormatClass(c));
                    buffer.Add("</li>");
                }
                buffer.Add("</ul>");
                buffer.Add("</section>");
            }

            buffer.Add("</body>\n<br><br>");

            buffer.Add("<footer><p>Documentation generated by QuickDoc version " + QuickDoc.VERSION + "</footer>");

            buffer.Add("</html>");

            SaveData(executionRequest);

        }

        private void SaveData(ExecutionRequest request)
        {
            File.WriteAllLines(request.outputDirectory + ".html", buffer);
        }

        private List<string> FormatField(Field field, bool genId = true)
        {
            List<string> buffer = new List<string>();

            string decLine = "<div id=\"field-" + field.name + "\" class=\"field-container\">";

            if(!genId)
            {
                decLine = "<div class=\"field-container\">";
            }

            buffer.Add(decLine);

            buffer.Add("<ul>");

            buffer.Add("<li>Name: " + field.name + "</li>");
            buffer.Add("<li>Type: " + field.type + "</li>");
            buffer.Add("<br>");
            buffer.Add("<li>Description: " + field.description + "</li>");

            buffer.Add("</ul>");

            buffer.Add("</div>");

            return buffer;

        }

        private List<string> FormatMethod(Method method, bool genId = true)
        {
            List<string> buffer = new List<string>();

            string decLine = "<div id=\"method-" + method.name + "\" + class=\"method-container\">";

            if(!genId)
                decLine = "<div class=\"method-container\">";

            buffer.Add(decLine);

            buffer.Add("<ul>");
            buffer.Add("<li>Name: " + method.name + "</li>");
            buffer.Add("<li>Returns: " + method.returnType + "</li>");
            buffer.Add("<br>");
            buffer.Add("<li>Description: " + method.description + "</li>");
            buffer.Add("<br>");
            if(method.parameters.Count > 0)
            {
                buffer.Add("<li>Parameters:</li>");
                buffer.Add("<br>");

                foreach(Field parameter in method.parameters)
                {
                    buffer.Add("<li>");
                    List<string> formattedParameter = FormatField(parameter, false);
                    buffer.Add(formattedParameter);
                    buffer.Add("</li>");
                }
            }
            buffer.Add("</ul>");
            buffer.Add("</div>");
            

            return buffer;

        }

        private List<string> FormatClass(Class c, bool genID = true)
        {
            List<string> buffer = new List<string>();

            string decLine = "<div id=\"class-" + c.name + "\" class=\"class-container\">";

            if(!genID)
                decLine = "<div class=\"class-container\">";

            buffer.Add(decLine);

            buffer.Add("<ul>");
            buffer.Add("<li>Name: " + c.name + "</li>");
            buffer.Add("<br>");
            buffer.Add("<li>Description: " + c.description + "</li>");
            if(c.memberFields.Count > 0)
            {
                buffer.Add("<li>Member Fields:</li>");
                buffer.Add("<br>");

                foreach(Field field in c.memberFields)
                {
                    buffer.Add("<li>");
                    buffer.Add(FormatField(field, false));
                    buffer.Add("</li>");
                }
            }

            if(c.memberMethods.Count > 0)
            {
                buffer.Add("<li>Member Functions:</li>");
                buffer.Add("<br>");
                foreach(Method method in c.memberMethods)
                {
                    buffer.Add("<li>");
                    buffer.Add(FormatMethod(method, false));
                    buffer.Add("</li>");
                }
            }

            buffer.Add("</ul>");
            buffer.Add("</div>");
            


            return buffer;
        }

        private void AddHead(ExecutionRequest request)
        {
            buffer.Add("<head><title>QuickDoc Documentation</title></head>");

            string stylePath = System.Environment.CurrentDirectory + "/style_template.txt";

            string[] style = File.ReadAllLines(stylePath);

            buffer.Add(style);
        }

        private List<string> GenerateIndex(List<Field> fields, List<Method> methods, List<Class> classes)
        {
            List<string> buffer = new List<string>();

            buffer.Add("<section id=\"index\">");
            buffer.Add("<h1>Index</h1>");
            buffer.Add("<div>");
            buffer.Add("<ul>");

            if(fields != null && fields.Count > 0)
            {
                buffer.Add("<li><h4>Fields</h4></li>");

                foreach(Field field in fields)
                {
                    buffer.Add("<li class=\"index-item\"><a href=\"#field-" + field.name + "\">" + field.name + "</a></li>");
                }

            }

            if(methods != null && methods.Count > 0)
            {
                buffer.Add("<li><h4>Methods</h4></li>");

                foreach(Method method in methods)
                {
                    buffer.Add("<li class=\"index-item\"><a href=\"#method-" + method.name + "\">" + method.name + "</a></li>");
                }
            }

            if(classes != null && classes.Count > 0)
            {
                buffer.Add("<li><h4>Classes</h4></li>");

                foreach(Class c in classes)
                {
                    buffer.Add("<li class=\"index-item\"><a href=\"#class-" + c.name + "\">" + c.name + "</a></li>");
                }
            }

            buffer.Add("</ul>");
            buffer.Add("</div>");
            buffer.Add("</section>");

            return buffer;

        }
        
    }
    //@qdend
}